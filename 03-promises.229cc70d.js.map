{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAGA,IAAIC,EAAQC,SAASC,cAAc,kBAC/BC,EAAOF,SAASC,cAAc,iBAC9BE,EAASH,SAASC,cAAc,mBAgCpC,SAASG,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,KACLH,EACFF,EAAQ,C,SAAEH,EAAUS,MAAAR,IAEpBG,EAAO,C,SAAEJ,EAAUS,MAAAR,GAAQ,GAE5BA,EAAM,G,CAxCKN,SAASC,cAAc,UAE/Bc,iBAAiB,SAE3B,SAAwBC,GACtBA,EAAMC,iBACN,IAAIC,EAAaC,OAAOpB,EAAMqB,OAC1BC,EAAYF,OAAOjB,EAAKkB,OAE5B,GAAIF,EAAa,GAAKG,EAAY,GAAKlB,EAAOiB,MAAQ,EACpDE,EAAAzB,GAAS0B,OAAOC,QACd,8BACA,kDACA,yBAGF,IAAK,IAAIC,EAAI,EAAGA,EAAItB,EAAOiB,MAAOK,IAAK,CAErCrB,EAAc,EAAIqB,EADHP,EAAaO,EAAIJ,GAE7BK,MAAK,EAACrB,SAAEA,EAAUS,MAAAa,MACjBL,EAAAzB,GAAS+B,OAAOC,QACd,qBAAqBxB,QAAesB,MACrC,IAEFG,OAAM,EAACzB,SAAEA,EAAUS,MAAAiB,MAClBT,EAAAzB,GAAS+B,OAAOI,QAAQ,oBAAoB3B,QAAe0B,MAAU,G","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\nimport 'notiflix/dist/notiflix-3.2.5.min.css';\n\nlet delay = document.querySelector('[name=\"delay\"]');\nlet step = document.querySelector('[name=\"step\"]');\nlet amount = document.querySelector('[name=\"amount\"]');\nconst submitBtn = document.querySelector('button');\n\nsubmitBtn.addEventListener('click', dataForPromice);\n\nfunction dataForPromice(event) {\n  event.preventDefault();\n  let firstDelay = Number(delay.value);\n  let delayStep = Number(step.value);\n\n  if (firstDelay < 0 || delayStep < 0 || amount.value < 0) {\n    Notiflix.Report.warning(\n      'Negative value(s) detected!',\n      'Only positive value can be entered in the field',\n      'Ok, I understand'\n    );\n  } else {\n    for (let i = 0; i < amount.value; i++) {\n      let nextTime = firstDelay + i * delayStep;\n      createPromise(1 + i, nextTime)\n        .then(({ position, delay }) => {\n          Notiflix.Notify.success(\n            `Fulfilled promise ${position} in ${delay}ms`\n          );\n        })\n        .catch(({ position, delay }) => {\n          Notiflix.Notify.failure(`Rejected promise ${position} in ${delay}ms`);\n        });\n    }\n  }\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$eWCmQ","parcelRequire","$47d4ff9957288465$var$delay","document","querySelector","$47d4ff9957288465$var$step","$47d4ff9957288465$var$amount","$47d4ff9957288465$var$createPromise","position","delay3","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","delay","addEventListener","event","preventDefault","firstDelay","Number","value","delayStep","$parcel$interopDefault","Report","warning","i","then","delay1","Notify","success","catch","delay2","failure"],"version":3,"file":"03-promises.229cc70d.js.map"}